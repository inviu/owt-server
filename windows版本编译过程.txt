假设项目路径在D:/workspace/owt-server下
注意自己编译的东西要复制到owt-server\build\libdeps\build或者workspace\owt-server\third_party\lib

安装node v8.15.1 x64，和node-gyp
https://github.com/nodejs/node-gyp#on-windows
node-gyp - Node.js native addon build tool
Installation
	npm install -g node-gyp
配置c++编译器
	npm config set msvs_version 2017
配置python路径,必须py2
	npm config set python D:\Python27\python.exe
	
任意空空目录下运行node-gyp configure
如果这个过程下载lib有问题，手动下载替换
原地址：
	https://nodejs.org/download/release/v8.15.1/win-x64/node.lib
	https://nodejs.org/download/release/v8.15.1/win-x86/node.lib
替换地址
	C:\Users\zade\AppData\Local\node-gyp\Cache\8.15.1\ia32\node.lib
	C:\Users\zade\AppData\Local\node-gyp\Cache\8.15.1\x64\node.lib

cd D:/workspace/owt-server
npm install nan@2.11.1 bindings@~1.2.1

安装msys2
大部分命令行都是在msys2的mingw64中进行
D:\msys64\usr\bin\link.exe 重命名，避免和vs的link冲突

cmd调用vs2017环境变量再进bash
call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Auxiliary\Build\vcvarsall.bat" amd64
set MSYS=D:\msys64\usr\bin
PATH=%path%;%MSYS%
set NASM=D:\workspace\vcpkg\downloads\tools\nasm\nasm-2.14.02\nasm.exe
PATH=%NASM%;%path%
set INCLUDE=%INCLUDE%
set LIB=%lib% 
bash

编译openh264
third_party/openh264/openh264
我写了个脚本，注意改路径

编译webrtc，使用cmder，cmd不支持长命令行
https://cmder.net/ 下载mini版本就行了
cd D:\workspace\owt-server\third_party\webrtc\src
set GYP_MSVS_VERSION=2017
set DEPOT_TOOLS_WIN_TOOLCHAIN=0
set GYP_GENERATORS=msvs-ninja,ninja
set DEPOT_TOOLS_UPDATE=0
set path=D:\workspace\webrtc\depot_tools;%path%

gn gen out --args="target_cpu=\"x64\" use_rtti=true is_debug=false is_clang=false use_sysroot=false treat_warnings_as_errors=false rtc_include_tests=false rtc_use_openmax_dl=false rtc_enable_protobuf=false rtc_enable_sctp=false rtc_build_expat=false rtc_build_json=false rtc_build_libjpeg=false rtc_build_libsrtp=false rtc_build_openmax_dl=false rtc_build_ssl=false rtc_build_usrsctp=false libyuv_use_gflags=false libyuv_include_tests=false libyuv_disable_jpeg=true rtc_use_h264=true rtc_build_libvpx=true rtc_libvpx_build_vp9=true rtc_build_opus=true rtc_include_opus=true"

ninja -C out video_coding audio_coding audio_conference_mixer metrics_default field_trial_default rtp_rtcp remote_bitrate_estimator bitrate_controller congestion_controller rtc_event_log_impl  libyuv_internal

使用我添加的owt-server\third_party\lib\merge_libs_win.py合并lib，webrtc.lib。注意可能需要修改lib.exe路径

编译logcxx 里面有vs工程，lib，dll复制到owt-server/lib中
owt-server\third_party

编译fdkaac，里面有vs工程，lib复制到owt-server/build/libdeps/build/lib中
owt-server/build/libdeps

//安装freetype，不能这么用，必须vs编译的
//pacman -S mingw-w64-x86_64-freetype

编译ffmpeg,目前不启用libfreetype，这个analytics_agent需要用，这个模块暂时不用
cd D:/workspace/owt-server/build/libdeps/ffmpeg-4.1.3
export PREFIX_DIR=D:/workspace/owt-server/build/libdeps/build
PKG_CONFIG_PATH=${PREFIX_DIR}/lib/pkgconfig:PKG_CONFIG_PATH CFLAGS=-fPIC ./configure --toolchain=msvc --arch=x86_64 --enable-yasm --enable-asm --prefix=${PREFIX_DIR} --enable-shared --disable-static --disable-libvpx --disable-vaapi --enable-libfdk-aac --enable-nonfree --disable-doc --disable-programs --extra-cflags=-I../build/include --extra-ldflags=-LIBPATH:../build/lib &&
make -j8 -s V=0 && make install

编译build/libdeps/usrsctp,build/libdeps/libsrtp2,build/libdeps/libnice（需要sdk8.1）,build/libdeps/libre，third_party/SvtHevcEnc
里面有vs工程

编译openssl,使用vs2017x64命令行
PATH=D:\workspace\vcpkg\downloads\tools\perl\perl\bin;%path%
cd D:/workspace/owt-server/build/libdeps/openssl-1.0.2t
perl Configure VC-WIN64A --prefix=D:/workspace/owt-server/build/libdeps/build
ms\do_win64a
nmake -f ms\ntdll.mak
nmake -f ms\ntdll.mak install

使用msys64调用sh脚本，目前sip模块有问题，没编译通过
cd D:/workspace/owt-server
node ./scripts/build.js -t video-mixer-sw -t video-transcoder-sw -t video-analyzer-sw -t internal-io -t logger -t media-frame-multicaster -t audio -t webrtc -t avstream

web版客户端参考原版，代码已经有了可以跳过。目前别用pack.js

覆盖编译的c++库
运行 workspace/copyNodeDll.bat

安装mongodb
https://www.mongodb.com/download-center/community
"Install MongoDB Compass" 不勾选，否则可能要很长时间都一直在执行安装，MongoDB Compass是一个图形界面管理工具，这里不安装也是没有问题的，可以自己去下载一个图形界面管理工具，比如Robo3T。https://robomongo.org/
D:\Program Files\MongoDB\Server\4.2\bin 加入path

安装RabbitMQ
参考https://blog.csdn.net/zhm3023/article/details/82217222
1、安装Erlang
下载地址：https://www.erlang.org/downloads，本文选择OTP 21.0.1 Windows 64-bit Binary File (91707927)
设置环境变量，新建ERLANG_HOME  D:\Program Files\erl10.7
修改环境变量path，增加Erlang变量至path，%ERLANG_HOME%\bin;
打开cmd命令框，输入erl测试

2、安装rabbitmq
exe安装地址：http://www.rabbitmq.com/install-windows.html
将rabbitmq-server-windows-3.7.7.zip解压缩至D:\Program Files目录下
设置环境变量，新建RABBITMQ_SERVER
修改环境变量path，增加rabbitmq变量至path，%RABBITMQ_SERVER%\sbin;
下面可以不做：
安装插件，命令：rabbitmq-plugins.bat enable rabbitmq_management
http://localhost:15672/ 能够看到后台
输入guest,guest进入rabbitMQ管理控制台：

初始化agent
D:\workspace\owt-server\dist下每个包含package.json的目录都要运行一次npm install，用于安装node依赖

dist/management_api/init.sh
得到key
superServiceId: 5e96afef3139976a9849da5e
superServiceKey: 4CGB3Oj9ZcWGMeN/IzXe0P/qoasZUcWYvq/dvwq1HOQUYcTnd48hipK+di4wejfeKfhph3OwFJUXy4sG9qTq6mjlO6HdAYvMQbi+muda55qDxDhATXc/f0VoFVP3jbOSbES/zpCRAO0Q09cWhH4qUj161m/k7+CYPlZp0n8N5rA=
sampleServiceId: 5e96afef3139976a9849da5f
sampleServiceKey: VSgsIWAZvoiX7vSAtZ+aFFKMIdG030oHuvHLh2qpVZoLH7jNkOj6Ka2Bql3ycqgIZK7sjxP2F9XRhRfjcnxloJkC0mX/3SmZcy95YkL55le6eYScN0SFsNwJ+CWLo7kbvOxKVgDMExsiQkRQmY35uYtPx4GsSEUl2VywYpurXEU=
修改sample对应sampleServiceId，sampleServiceKey
dist\extras\basic_example\samplertcservice.js

运行 owt-server
cd D:/workspace/owt-server
dist/bin/start-all.sh
